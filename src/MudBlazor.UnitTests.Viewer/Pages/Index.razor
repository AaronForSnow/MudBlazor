@page "/"
@using System.Reflection

<MudLayout>
    <MudRTLProvider RightToLeft="_rightToLeft">
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DocsDrawerToggle" />
            <MudText Typo="Typo.h6">@_selectedType?.Name</MudText>
            <MudSpacer />
            <MudAutocomplete @ref="_autocomplete" T="Type" Placeholder="Search" SearchFunc="Search" Variant="Variant.Outlined" ValueChanged="OnSearchResult" Class="docs-search-bar" AdornmentIcon="@Icons.Material.Filled.Search">
                <ItemTemplate Context="result">
                    <MudText>@result.Name</MudText> <MudText Typo="Typo.body2">@GetDescription(result)</MudText>
                </ItemTemplate>
            </MudAutocomplete>
            <MudSpacer />
            <MudTooltip Delay="1000" Text="@(_rightToLeft ? "Left-to-right" : "Right-to-left")">
                <MudIconButton Icon="@(_rightToLeft ? @Icons.Material.Filled.FormatTextdirectionLToR : @Icons.Material.Filled.FormatTextdirectionRToL)" OnClick="() => _rightToLeft = !_rightToLeft" Color="Color.Inherit" aria-label="@(_rightToLeft ? "Left-to-right" : "Right-to-left")" />
            </MudTooltip>
        </MudAppBar>
        <MudDrawer Open="@_drawerOpen" Overlay="false" Variant="DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always" Breakpoint="Breakpoint.Sm">
            <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Test Components</MudText>
            </MudDrawerHeader>
            <MudStack Row>
                <MudTextField T="string" @bind-Value="@_currentSearchText" Immediate="true" FullWidth="true"
                              Placeholder="Search by category" Variant="Variant.Outlined" Class="mx-2 my-2"
                              Typo="Typo.caption" Margin="Margin.Dense" Clearable DebounceInterval="300" />
                <MudTooltip RootClass="d-flex flex-auto" Text="@(_expandedState ? "Collapse Categories" : "Expand Categories")">
                    <MudIconButton Class="mr-1 ml-n2" Icon="@(_expandedState ? CollapseAllIcon : ExpandAllIcon)" 
                        Size="Size.Small" OnClick="@(() => ToggleExpanded())" />
                </MudTooltip>
                
            </MudStack>
            <MudItem xs="12">
                <MudNavMenu>
                    @for (int index = 0; index < _availableDirectories.Length; index++)
                    {
                        var dir = _availableDirectories[index];
                        var typesInDir = _availableComponentTypes.Where(x => _typeDirectories?[x] == dir);

                        if (dir is not null && (!ShouldFilter || dir.Contains(_currentSearchText, StringComparison.OrdinalIgnoreCase)))
                        {
                            <MudNavGroup Expanded="@_mudGroupExpanded[index]" Title="@dir">
                                @foreach (var type in typesInDir)
                                {
                                        <MudNavLink Class="@(_selectedType == type ? "mode-links active" : "")"
                                            OnClick="@(() => _selectedType = type)" @key="type.Name">@type.Name</MudNavLink>
                                }
                            </MudNavGroup>
                        }
                    }
                </MudNavMenu>
            </MudItem>
        </MudDrawer>
        <MudMainContent Class="mt-4">

            <MudText Style="padding-left: 24px; margin-left: 24px;">
                @GetDescription(_selectedType)
            </MudText>
            <MudPaper Elevation="5" Style="padding: 24px; margin: 24px;">
                @if (_selectedType == null)
                {
                    <MudAlert Dense="true" Severity="Severity.Info">
                        <span>Select a component</span>
                    </MudAlert>
                }
                else
                {
                    @* Prevent double popovers! *@
                    <CascadingValue Name="UsePopoverProvider" Value="false" IsFixed="true">
                        @TestComponent()
                    </CascadingValue>
                }
            </MudPaper>

        </MudMainContent>
    </MudRTLProvider>
</MudLayout>
<style>
    .docs-search-bar .mud-input {
        height: 42px;
    }

    .docs-search-bar.mud-input-control {
        background-color: rgba(255,255,255,.15);
        margin-bottom: 5px;
        height: 42px;
        border-radius: var(--mud-default-borderradius);
    }

        .docs-search-bar.mud-input-control .mud-input-root, .docs-search-bar.mud-input-control .mud-icon-default {
            color: #fafafa;
        }

    .docs-search-bar .mud-input.mud-input-outlined .mud-input-outlined-border {
        border: none;
        border-radius: var(--mud-default-borderradius);
    }

    .mode-links.active {
        color: var(--mud-palette-primary);
        background-color: var(--mud-palette-primary-hover)
    }
</style>

@code {
    private const string ExpandAllIcon = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>expand-all-outline</title><path d="M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M19,17H17V19H15V17H13V15H15V13H17V15H19V17Z" /></svg>""";
    private const string CollapseAllIcon = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>collapse-all-outline</title><path d="M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M19,17H13V15H19V17Z" /></svg>""";

    private bool _rightToLeft;
    private Type? _selectedType;
    private bool _drawerOpen = true;
    private bool _expandedState = true;
    private bool[] _mudGroupExpanded = [];
    private Type[] _availableComponentTypes = [];
    private string?[] _availableDirectories = [];
    private string _currentSearchText = string.Empty;
    private Dictionary<Type, string>? _typeDirectories;
    private MudAutocomplete<Type> _autocomplete = null!;

    private bool ShouldFilter => !string.IsNullOrWhiteSpace(_currentSearchText) && _currentSearchText.Length > 2;

    private void DocsDrawerToggle() => _drawerOpen = !_drawerOpen;

    private void ToggleExpanded()
    {
        _expandedState = !_expandedState;
        for (int i = 0; i < _mudGroupExpanded.Length; i++)
        {
            _mudGroupExpanded[i] = _expandedState;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _availableComponentTypes = GetTestComponentTypes().ToArray();
        _availableDirectories = GetTestFolders().ToArray();

        _mudGroupExpanded = new bool[_availableDirectories.Length];
        ToggleExpanded();

        _typeDirectories = _availableComponentTypes.ToDictionary(
            type => type,
            type => type.Namespace?.Split('.').LastOrDefault() ?? string.Empty
        );
    }

    private RenderFragment TestComponent() => builder =>
    {
        if (_selectedType is null)
        {
            return;
        }

        builder.OpenComponent(0, _selectedType);
        builder.CloseComponent();
    };

    private static IEnumerable<Type> GetTestComponentTypes()
    {
        var types = typeof(Program).Assembly.GetTypes()
            .Where(type => type.Name.Contains("Test"))
            .Where(type => !type.Name.StartsWith("<"))
            .Where(type => type.GetInterfaces().Contains(typeof(IComponent)))
            .OrderBy(type => type.Name);

        foreach (var type in types)
        {
            yield return type;
        }
    }

    private IEnumerable<string?> GetTestFolders()
    {
        return _availableComponentTypes
            .Select(type => type.Namespace?.Split('.').LastOrDefault())
            .Where(namespaceName => !string.IsNullOrEmpty(namespaceName))
            .Distinct()
            .OrderBy(namespaceName => namespaceName);
    }

    private Task<IEnumerable<Type>> Search(string text, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            return Task.FromResult<IEnumerable<Type>>(Type.EmptyTypes);
        }

        var components = _availableComponentTypes.Where(type => type.Name.Contains(text, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(components);
    }

    private async void OnSearchResult(Type? entry)
    {
        if (entry is null)
        {
            return;
        }

        _selectedType = entry;
        await Task.Yield();
        await _autocomplete.ClearAsync();
    }

    private static string? GetDescription(Type? type)
    {
        if (type is null)
        {
            return string.Empty;
        }

        var field = type.GetField("__description__", BindingFlags.Public | BindingFlags.Static | BindingFlags.GetField);
        if (field is null || field.FieldType != typeof(string))
        {
            return "This test component does not have a description. Field \"public static string __description__\" not found in this component.";
        }

        return (string?)field.GetValue(null);
    }
}