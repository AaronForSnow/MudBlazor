@page "/"
@using System.Reflection
@using System.Threading

<MudLayout>
    <MudRTLProvider RightToLeft="_rightToLeft">
        <MudAppBar Elevation="0">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DocsDrawerToggle" />
            <MudText Typo="Typo.h6">@selectedType?.Name</MudText>
            <MudSpacer />
            <MudAutocomplete @ref="autocomplete" T="Type" Placeholder="Search" SearchFunc="Search" Variant="Variant.Outlined" ValueChanged="OnSearchResult" Class="docs-search-bar" AdornmentIcon="@Icons.Material.Filled.Search">
                <ItemTemplate Context="result">
                    <MudText>@result.Name</MudText> <MudText Typo="Typo.body2">@getDescription(result)</MudText>
                </ItemTemplate>
            </MudAutocomplete>
            <MudSpacer />
            <MudTooltip Delay="1000" Text="@(_rightToLeft ? "Left-to-right" : "Right-to-left")">
                <MudIconButton Icon="@(_rightToLeft ? @Icons.Material.Filled.FormatTextdirectionLToR : @Icons.Material.Filled.FormatTextdirectionRToL)" OnClick="() => _rightToLeft = !_rightToLeft" Color="Color.Inherit" aria-label="@(_rightToLeft ? "Left-to-right" : "Right-to-left")" />
            </MudTooltip>
        </MudAppBar>
        <MudDrawer Open="@drawerOpen" Overlay="false" Variant="DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always" Breakpoint="Breakpoint.Sm">
            <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Test Components</MudText>
            </MudDrawerHeader>
            <MudStack Row>
                <MudTextField T="string" @bind-Value="@currentSearchText" Immediate="true" FullWidth="true"
                              Placeholder="Search by category" Variant="Variant.Outlined" Class="mx-2 my-2"
                              Typo="Typo.caption" Margin="Margin.Dense" Clearable DebounceInterval="300" />
                <MudTooltip RootClass="d-flex flex-auto" Text="@(expandedState ? "Collapse Categories" : "Expand Categories")">
                    <MudIconButton Class="mr-1 ml-n2" Icon="@(expandedState ? collapseAllIcon : expandAllIcon)" 
                        Size="Size.Small" OnClick="@(() => ToggleExpanded())" />
                </MudTooltip>
                
            </MudStack>
            <MudItem xs="12">
                <MudNavMenu>
                    @for (int index = 0; index < availableDirectories.Length; index++)
                    {
                        var dir = availableDirectories[index];
                        var typesInDir = availableComponentTypes
                        .Where(x => _typeDirectories[x] == dir);

                        if (!shouldFilter || dir.Contains(currentSearchText, StringComparison.OrdinalIgnoreCase))
                        {
                            <MudNavGroup Expanded="@mudGroupExpanded[index]" Title="@dir">
                                @foreach (var type in typesInDir)
                                {
                                        <MudNavLink Class="@(selectedType == type ? "mode-links active" : "")"
                                            OnClick="@(() => selectedType = type)" @key="type.Name">@type.Name</MudNavLink>
                                }
                            </MudNavGroup>
                        }
                    }
                </MudNavMenu>
            </MudItem>
        </MudDrawer>
        <MudMainContent Class="mt-4">

            <MudText Style="padding-left: 24px; margin-left: 24px;">
                @getDescription(selectedType)
            </MudText>
            <MudPaper Elevation="5" Style="padding: 24px; margin: 24px;">
                @if (@selectedType == null)
                {
                    <MudAlert Dense="true" Severity="Severity.Info">
                        <span>Select a component</span>
                    </MudAlert>
                }
                else
                {
                    @* Prevent double popovers! *@
                    <CascadingValue Name="UsePopoverProvider" Value="false" IsFixed="true">
                        @TestComponent()
                    </CascadingValue>
                }
            </MudPaper>

        </MudMainContent>
    </MudRTLProvider>
</MudLayout>
<style>
    .docs-search-bar .mud-input {
        height: 42px;
    }

    .docs-search-bar.mud-input-control {
        background-color: rgba(255,255,255,.15);
        margin-bottom: 5px;
        height: 42px;
        border-radius: var(--mud-default-borderradius);
    }

        .docs-search-bar.mud-input-control .mud-input-root, .docs-search-bar.mud-input-control .mud-icon-default {
            color: #fafafa;
        }

    .docs-search-bar .mud-input.mud-input-outlined .mud-input-outlined-border {
        border: none;
        border-radius: var(--mud-default-borderradius);
    }

    .mode-links.active {
        color: var(--mud-palette-primary);
        background-color: var(--mud-palette-primary-hover)
    }
</style>

@code {
    bool drawerOpen = true;
    bool _rightToLeft = false;
    Type selectedType = null;
    string currentSearchText = string.Empty;
    bool shouldFilter => !string.IsNullOrWhiteSpace(currentSearchText) && currentSearchText.Length > 2;
    bool[] mudGroupExpanded = new bool[0];
    Type[] availableComponentTypes = new Type[0];
    string[] availableDirectories = new string[0];
    private Dictionary<Type, string> _typeDirectories;
    MudAutocomplete<Type> autocomplete;

    bool expandedState = true;
    string expandAllIcon = @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>expand-all-outline</title><path d=""M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M19,17H17V19H15V17H13V15H15V13H17V15H19V17Z"" /></svg>";
    string collapseAllIcon = @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 24 24""><title>collapse-all-outline</title><path d=""M4,2A2,2 0 0,0 2,4V14H4V4H14V2H4M8,6A2,2 0 0,0 6,8V18H8V8H18V6H8M20,12V20H12V12H20M20,10H12A2,2 0 0,0 10,12V20A2,2 0 0,0 12,22H20A2,2 0 0,0 22,20V12A2,2 0 0,0 20,10M19,17H13V15H19V17Z"" /></svg>";
    
    void DocsDrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    void ToggleExpanded()
    {
        expandedState = !expandedState;
        for (int i = 0; i < mudGroupExpanded.Length; i++)
        {
            mudGroupExpanded[i] = expandedState;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        availableComponentTypes = getTestComponentTypes().ToArray();
        availableDirectories = getTestFolders().ToArray();
        mudGroupExpanded = new bool[availableDirectories.Length];
        ToggleExpanded();
        _typeDirectories = availableComponentTypes.ToDictionary(
            type => type,
            type => type.Namespace?.Split('.').LastOrDefault() ?? ""
            );
    }

    RenderFragment TestComponent() => builder =>
    {
        builder.OpenComponent(0, selectedType);
        builder.CloseComponent();
    };

    IEnumerable<Type> getTestComponentTypes()
    {
        foreach (var type in typeof(Program).Assembly.GetTypes().OrderBy(x => x.Name))
        {
            if (!type.Name.Contains("Test"))
                continue;
            if (type.Name.StartsWith("<"))
                continue;
            if (!type.GetInterfaces().Contains(typeof(IComponent)))
                continue;
            yield return type;
        }
    }

    IEnumerable<string> getTestFolders()
    {
        return availableComponentTypes
            .Select(x => x.Namespace?.Split('.').LastOrDefault())
            .Where(x => x != null)
            .Distinct()
            .OrderBy(x => x);
    }

    private string getDescription(Type type)
    {
        if (type == null)
            return "";
        var field = type.GetField("__description__", BindingFlags.Public | BindingFlags.Static | BindingFlags.GetField);
        if (field == null || field.FieldType != typeof(string))
            return "This test component does not have a description. Field \"public static string __description__\" not found in this component.";
        return (string)field.GetValue(null);
    }

    private Task<IEnumerable<Type>> Search(string text, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(text))
            return Task.FromResult<IEnumerable<Type>>(new Type[0]);

        return Task.FromResult<IEnumerable<Type>>(
            availableComponentTypes.Where(type => type.Name.Contains(text, StringComparison.OrdinalIgnoreCase))
        );
    }

    private async void OnSearchResult(Type entry)
    {
        if (entry == null)
            return;

        selectedType = entry;
        await Task.Yield();
        await autocomplete.ClearAsync();
    }
}